<!DOCTYPE html>
<html lang="de">
<head>
<meta charset="utf-8">
<title>Livestreams deutscher TV-Sender</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link rel="icon" type="image/png" href="favicon.png" sizes="96x96">
<link href="https://unpkg.com/video.js@8.12.0/dist/video-js.min.css" rel="stylesheet">
<style>
html, body {
	width: 100%;
	height: 100%;
}
body {
	margin: 0;
	background-color: black;
	overflow: hidden;
}
#my-player {
	width: 100% !important;
	height: 100% !important;
}
select {
	background-color: transparent;
	color: #e0e0e0;
	border: 1px solid #e0e0e0;
	border-radius: 4px;
	font-size: 12px;
}
select:focus {
	background-color: #202020;
}

select::-webkit-scrollbar {
	background-color: #202020;
	width: 8px;
}
select::-webkit-scrollbar-thumb {
	background: #666;
}
#channel {
	position: absolute;
	top: 10px;
	right: 115px;
	width: 150px;
	z-index: 9999;
}
#quality {
	position: absolute;
	top: 10px;
	right: 10px;
	width: 95px;
	z-index: 9999;
}
.vjs-big-play-button {
	visibility: hidden;
}
.vjs-control-bar {
	background-color: rgba(30,30,30,.5) !important;
}
@media (max-width: 1024px) {
	#channel {
		width: 22px;
		right: 10px;
	}
	#quality {
		display: none
	}
	select::-webkit-scrollbar, select::-webkit-scrollbar-thumb {
		background-color: unset;
	}
}
</style>
</head>
<body>
<video-js id="my-player" class="vjs-default-skin" controls></video-js>
<select id="channel"><option value="" selected disabled>-- Sender --</option></select>
<select id="quality"><option value="" selected disabled>-- Qualit√§t --</option></select>
<script src="https://unpkg.com/video.js@8.12.0/dist/video.min.js"></script>
<script>
const channel_select = document.querySelector('#channel');
const quality_select = document.querySelector('#quality');
const player = videojs('my-player');
const quality_levels = player.qualityLevels();

quality_levels.on('change', function(){
	quality_select.length = 0;
	quality_select.add(new Option('Auto', ''));
	const current_level_id = quality_levels[quality_levels.selectedIndex].id;
	for (let quality_level of Array.from(quality_levels).sort((a, b) => ((a.height > b.height) ? -1 : ((a.height < b.height) ? 1 : 0))))
	{
		quality_select.add(new Option(`${quality_level.height}p ${quality_level.frameRate}fps`, quality_level.id, false, quality_level.id == current_level_id));
	}
});

quality_select.onchange = function(){
	this.blur();
    for (let quality_level of quality_levels)
    {
    	quality_level.enabled = this.value ? quality_level.id == this.value : true;
    }
};

channel_select.onchange = function(){
	this.blur();
	if (this.value)
	{
		// Turn off subtitles/captions per default, even if marked as "default" in .m3u8. User can still turn it on.
		player.getCache().selectedLanguage = {enabled: false};
		player.src({src: this.value, type: 'application/x-mpegURL'});
		player.play();
		location.hash = '#' + encodeURIComponent(this[this.selectedIndex].innerText);
	}
}

fetch('https://mediathekviewweb.de/api/query?query=' + encodeURIComponent(JSON.stringify({
	'queries': [
		{'fields': ['topic'], 'query': 'Livestream'},
		{'fields': ['title'], 'query': 'Livestream'}
	],
	'size': 100
})))
.then(res => res.json())
.then(res => {
	// Sort by channel name and fllter out some either geoblocked or rather irrelevant stuff
	const channels = res.result.results.filter((row) => row.topic == 'Livestream' && !row.title.includes('ORF') && !row.title.includes('WDR Lokalzeit')).sort((a, b) =>
        a.title.localeCompare(b.title));
	for (let channel of channels)
	{
		// 'DW (Deutsch)' currently not available via HLS at all?
		// Instead of removing it completely, for now show 'DW (Englisch)' as hard-coded alternative.
		if (channel.title.startsWith('DW '))
		{
			channel_select.add(new Option('DW (Englisch)', 'https://dwamdstream102.akamaized.net/hls/live/2015525/dwstream102/index.m3u8'));
		}
		else
		{
			channel_select.add(new Option(channel.title.replace(' Livestream', ''), channel.url_video.replace('http://', 'https://')));
		}
	}
	// Support for direct channel access via bookmark with hash
	if (location.hash)
	{
		const channel_name = decodeURIComponent(location.hash.substr(1));
		const idx = [...channel_select.options].findIndex(option => option.text === channel_name);
		if (idx > -1)
		{
			channel_select.selectedIndex = idx;
			player.getCache().selectedLanguage = {enabled: false};
			player.src({src: channel_select.options[idx].value, type: 'application/x-mpegURL'});
			document.querySelector('.vjs-big-play-button').style.visibility = 'visible';
		}
	}
});
</script>
</body>
</html>
